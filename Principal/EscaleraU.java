package Principal;

import com.sun.j3d.utils.geometry.Box;
import com.sun.j3d.utils.geometry.Primitive;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.ArrayList;

public class EscaleraU {

    private EscenaGrafica escena;
    private TransformGroup tgEscalera;
    private ArrayList<TransformGroup> pelda침osTG = new ArrayList<>();
    private ArrayList<Box> pelda침osBox = new ArrayList<>();
    private Colisiones2 colisiones;

    public EscaleraU(EscenaGrafica escena, Colisiones2 colisiones) {
        this.escena = escena;
        this.colisiones = colisiones;
    }

    public void construir(float x, float y, float z,
                          float anchoTotal, float altoTotal, float profundoTotal,
                          float rotYGrados) {

        tgEscalera = new TransformGroup();
        tgEscalera.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);

        // Transformaci칩n global de rotaci칩n y posici칩n
        Transform3D transform = new Transform3D();
        transform.setTranslation(new Vector3f(x, y, z));
        if (rotYGrados != 0) {
            Transform3D rot = new Transform3D();
            rot.rotY(Math.toRadians(rotYGrados));
            transform.mul(rot);
        }
        tgEscalera.setTransform(transform);
        escena.tgMundo.addChild(tgEscalera);

        // 游꿢 PAR츼METROS
        int pelda침osPorTramo = 5;
        int descansoPelda침osEquivalentes = 4;

        int totalPartes = pelda침osPorTramo * 2 + descansoPelda침osEquivalentes;
        float altoPelda침o = altoTotal / (pelda침osPorTramo * 2);
        float profundoPelda침o = profundoTotal / totalPartes;
        float anchoPelda침o = anchoTotal / 2f;

        float sepZ = profundoPelda침o * 1.1f;
        float descansoProfundo = profundoPelda침o * descansoPelda침osEquivalentes;
        float descansoZ = -pelda침osPorTramo * sepZ - descansoProfundo / 2;
        float descansoY = pelda침osPorTramo * altoPelda침o;

        Appearance blanca = crearAparienciaBlanca();
        Appearance mosaico = Textura.getInstance().crearTexturas("mosaico.jpg");

        // 游댷 Primer tramo (sube en Z negativa)
        for (int i = 0; i < pelda침osPorTramo; i++) {
            float posY = i * altoPelda침o;
            float posZ = -i * sepZ;
            float posX = anchoPelda침o / 2;
            agregarPelda침o(posX, posY, posZ, anchoPelda침o, altoPelda침o, profundoPelda침o,
                    blanca, mosaico, i == 0 || i == pelda침osPorTramo - 1);
        }

        // 游빔 Descanso: ocupa TODO el ancho y 4 veces la profundidad de un pelda침o
        float descansoAncho = anchoPelda침o * 2;
        agregarPelda침o(0f, descansoY, descansoZ-0.4f, descansoAncho, altoPelda침o, descansoProfundo*3,
                blanca, mosaico, false);

        // 游댶 Segundo tramo (sube en Z positiva, a la izquierda)
        for (int i = 1; i <= pelda침osPorTramo; i++) {
            float posY = descansoY + i * altoPelda침o;
            float posZ = descansoZ + descansoProfundo / 2 + i * sepZ;
            float posX = -anchoPelda침o / 2;
            agregarPelda침o(posX, posY, posZ, anchoPelda침o, altoPelda침o, profundoPelda침o,
                    blanca, mosaico, i == 1 || i == pelda침osPorTramo);
        }
    }

    private void agregarPelda침o(float x, float y, float z,
                                float ancho, float alto, float profundo,
                                Appearance aparLados, Appearance aparSuperior,
                                boolean colisionable) {

        Transform3D t3d = new Transform3D();
        t3d.setTranslation(new Vector3f(x, y, z));
        TransformGroup tg = new TransformGroup(t3d);
        tg.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);

        Box pelda침o = new Box(ancho / 2, alto / 2, profundo / 2,
                Primitive.GENERATE_NORMALS | Primitive.GENERATE_TEXTURE_COORDS,
                aparLados);
        pelda침o.getShape(Box.TOP).setAppearance(aparSuperior);

        tg.addChild(pelda침o);
        tgEscalera.addChild(tg);

        pelda침osTG.add(tg);
        pelda침osBox.add(pelda침o);

        if (colisionable) {
            escena.listaTransform.add(tg);
            escena.listaBoxs.add(pelda침o);
        }
    }

    private Appearance crearAparienciaBlanca() {
        Appearance app = new Appearance();
        Material mat = new Material();
        mat.setDiffuseColor(new Color3f(1f, 1f, 1f));
        mat.setSpecularColor(new Color3f(0.9f, 0.9f, 0.9f));
        app.setMaterial(mat);
        return app;
    }
}
